3.1 Shell格式
    #括弧 {},[],() 可以换行 并新行以 ... 开头
    #Tab键提示相似命令
    #To exit the shell, type quit() or use the <Ctrl-C> shortcut.
    #帮助：mongo --help 或 > help  (在mongo Shell环境)
        db.help()                    help on db methods
        db.mycoll.help()             help on collection methods
        sh.help()                    sharding helpers
        rs.help()                    replica set helpers
        help admin                   administrative help
        help connect                 connecting to a db help
        help keys                    key shortcuts
        help misc                    misc things to know
        help mr                      mapreduce

        show dbs                     show database names
        show collections             show collections in current database
        show users                   show users in current database
        show profile                 show most recent system.profile entries with time >= 1ms
        show logs                    show the accessible logger names
        show log [name]              prints out the last segment of log in memory, 'global' is default
        use <db_name>                set current database
        db.foo.find()                list objects in collection foo
        db.foo.find( { a : 1 } )     list objects in foo where a == 1
        it                           result of the last line evaluated; use to further iterate
        DBQuery.shellBatchSize = x   set default number of items to display on shell
        exit                         quit the mongo shell
3.2 Shell JavaScript
    #use mongo to evaluate JavaScript:mongo databaseName --eval "<js code>"
    #loads and executes the myjstest.js file: > load("myjstest.js")
    #Wrapper Object
    >help misc						# list of the wrapper classes
3.3 Shell Configure
    #Customize the Prompt(setting the variable prompt)
        1,Display Number of Operations:
            >cmdCount = 1;
            >prompt = function() {
                return (cmdCount++) + "> ";
            }
        2,Display Database and Hostname: >prompt = function() { return db+"@"+db.serverStatus().host+"$ "; }
        3,Display Up Time and Document Count: >prompt = function() { return "Uptime:"+db.serverStatus().uptime+" Documents:"+db.stats().objects+" > "; }
    #Use an External Editor: export EDITOR=vim
        1,edit <variable> or edit <function> (setting the EDITOR environment variable before starting the mongo:export EDITOR=vim)
            >function myFunction () { } #定义函数
            >myFunction 				#打印函数
            >myFunction() 				#运行函数
            >edit myFunction 			#修改函数
    Change the mongo Shell Batch Size(set the DBQuery.shellBatchSize attribute)：>DBQuery.shellBatchSize = 10;
3.4 db handle
    #history
        Command history is stored in ~/.dbshell file.
    #auth
        >db.auth()						#If running in secure mode, authenticate the user.
    #database Shell
        >db								#To display the database you are using
        >db.help()						#To help
        >use <database> 				#To switch databases
        >show dbs 						#To list the available databases,
        >db.getSiblingDB('databaseName')#To access a different database from the current database without switching your current database context
        >use myNewDatabase				#To non-existing databases and creating a collection,creates the new database.
        >db.functionName				#To see the implementation of a method
        >db.cloneDatabase(<host>)		#Clone the current database from the <host> specified. The <host> database instance must be in noauth mode.
        >db.copyDatabase(<from>, <to>, <host>)					#Copy the <from> database from the <host> to the <to> database on the current server.
        >db.fromColl.renameCollection(<toColl>)					#Rename collection from fromColl to <toColl>.
        >db.repairDatabase()			#Repair and compact the current database. This operation can be very slow on large databases.
        >db.getCollectionNames()		#Get the list of all collections in the current database.
        >db.dropDatabase()				#Drops the current database.
    #Collection Shell
        >show collections										# list the collections
        >db.collection.help()									# collections help
        >db.<collection>.<method>								# To see the implementation of a method
        >db.myNewCollection.insert( { 'name': 'liuyang' } ); 	# add Collection
        >db["myNewCollection"].find()							# select
        >db.myNewCollection.find()								# select
        >db.getCollection("myNewCollection").find()				# select
        >db.collection.update()									# Update an existing document in the collection.
        >db.collection.save()									# Insert either a new document or update an existing document in the collection.
        >db.collection.remove()									# Delete documents from the collection.
        >db.collection.drop()									# Drops or removes completely the collection.
        >db.collection.createIndex()							# Create a new index on the collection if the index does not exist; otherwise, the operation has no effect.
        >db.getSiblingDB()										# Return a reference to another database using this same connection without explicitly switching the current database. This allows for cross database queries.
    #Cursor
        >db.collection.find().help()							# help
        >db.collection.find().functionName						# To see the implementation of a method
    #Error
        >db.getLastError()
        >db.getLastErrorObj()
    #connect
        conn=new Mongo(<host:port>);
        db = conn.getDB("myDatabase");
        db = connect("<host><:port>/<dbname>")					#Open a new database connection.