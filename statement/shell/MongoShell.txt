
3.4 db handle
    #history
        Command history is stored in ~/.dbshell file.
    #auth
        >db.auth()						#If running in secure mode, authenticate the user.
    #database Shell
        >db								#To display the database you are using
        >db.help()						#To help
        >use <database> 				#To switch databases
        >show dbs 						#To list the available databases,
        >db.getSiblingDB('databaseName')#To access a different database from the current database without switching your current database context
        >use myNewDatabase				#To non-existing databases and creating a collection,creates the new database.
        >db.functionName				#To see the implementation of a method
        >db.cloneDatabase(<host>)		#Clone the current database from the <host> specified. The <host> database instance must be in noauth mode.
        >db.copyDatabase(<from>, <to>, <host>)					#Copy the <from> database from the <host> to the <to> database on the current server.
        >db.fromColl.renameCollection(<toColl>)					#Rename collection from fromColl to <toColl>.
        >db.repairDatabase()			#Repair and compact the current database. This operation can be very slow on large databases.
        >db.getCollectionNames()		#Get the list of all collections in the current database.
        >db.dropDatabase()				#Drops the current database.
    #Collection Shell
        >show collections										# list the collections
        >db.collection.help()									# collections help
        >db.<collection>.<method>								# To see the implementation of a method
        >db.myNewCollection.insert( { 'name': 'liuyang' } ); 	# add Collection
        >db["myNewCollection"].find()							# select
        >db.myNewCollection.find()								# select
        >db.getCollection("myNewCollection").find()				# select
        >db.collection.update()									# Update an existing document in the collection.
        >db.collection.save()									# Insert either a new document or update an existing document in the collection.
        >db.collection.remove()									# Delete documents from the collection.
        >db.collection.drop()									# Drops or removes completely the collection.
        >db.collection.createIndex()							# Create a new index on the collection if the index does not exist; otherwise, the operation has no effect.
        >db.getSiblingDB()										# Return a reference to another database using this same connection without explicitly switching the current database. This allows for cross database queries.
    #Cursor
        >db.collection.find().help()							# help
        >db.collection.find().functionName						# To see the implementation of a method
    #Error
        >db.getLastError()
        >db.getLastErrorObj()
    #connect
        conn=new Mongo(<host:port>);
        db = conn.getDB("myDatabase");
        db = connect("<host><:port>/<dbname>")					#Open a new database connection.

10,CRUD
  	4.1,Create
  		db.collection.insert(<document or array of documents>,{writeConcern: <document>,ordered: <boolean>})
  		db.collection.insertOne(<document>,{writeConcern: <document>})
  		db.collection.insertMany([ <document 1> , <document 2>, ... ],{writeConcern: <document>,ordered: <boolean>})
  	4.2,Retrieve
  		db.collection.find([<query>][, <projection>])[.sort(<sort order>)][.limit( <n> )][.skip( <n> )][.pretty()][.explain()]
  		    ArrayQuery(https://docs.mongodb.com/manual/tutorial/query-array-of-documents/):
  		        <array>:[<value1>,<value1>]             #精确匹配，包括个数，及元素顺序
  		        <array>:{$all:[<value1>,<value1>]}      #完全匹配，包含$all内的元素
  		        "<field1>.[<number>.]<field2>"          #匹配数组field1内的[第number个元素]的field2
  		        db.collection.find({<array>:<value>,<someOtherArray>:<value2>},{"<array>.$":1})
  		            {"<array>.$":1} : returns only the first element in <array> for this condition
  		        IterateCursor(https://docs.mongodb.com/manual/tutorial/iterate-a-cursor/):
  		db.collection[.find([<query>][, <projection>])].count()
  		db.collection.findOne([<query>])
  		db.collection.distinct(field, query, options)
  		#
  		    $           :数组的元素
  		    .           :在查询语句里表明嵌套结构，data: {"grades" : [ { grade: 80, mean: 75, std: 8 }]}, query:{"grades.mean": { $gt: 70 }}
  		    _id         :ObjectId
  		    $elemMatch  :in_array
  	4.3,Update
  	    db.collection.update(<query>, <update>, { upsert: <boolean>, multi: <boolean>, writeConcern: <document>, collation: <document> })
  		db.collection.updateOne(<filter>, <update>, <options>)  # <update> -> 4.7,Update Operators
          db.collection.updateMany(<filter>, <update>, <options>)
          db.collection.replaceOne(<filter>, <replacement>, <options>)
  	4.4,Delete
  		db.collection.deleteMany({ <field1>: { <operator1>: <value1> }, ... })
          db.collection.deleteOne({ <field1>: { <operator1>: <value1> }, ... })
          db.collection.remove( <query>, { justOne: <boolean>, writeConcern: <document>, collation: <document> } )
  	4.5,Concern
  	    Write Concern:(https://docs.mongodb.com/manual/reference/write-concern/)
              w: 				# requests acknowledgement that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.
                  1			# Requests acknowledgement that the write operation has propagated to the standalone mongod or the primary in a replica set. w: 1 is the default write concern for MongoDB.
                  0			# Requests no acknowledgement of the write operation. However, w: 0 may return information about socket exceptions and networking errors to the application.
                  majority	# Requests acknowledgement that write operations have propagated to the majority of voting nodes , including the primary.
                  <tag set>	# Requests acknowledgement that the write operations have propagated to a replica set member with the specified tag.
              j:				# requests acknowledgement from MongoDB that the write operation has been written to the journal.
                  true		# requests acknowledgement that the mongod instances have written to the on-disk journal.
              wtimeout:		# This option specifies a time limit, in milliseconds, for the write concern.
  		Read Concern:(https://docs.mongodb.com/manual/reference/read-concern/)
  		    local           # Default. The query returns the instance’s most recent data. Provides no guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
  		    majority        # The query returns the instance’s most recent data acknowledged as having been written to a majority of members in the replica set.
  		    linearizable    # The query returns data that reflects all successful writes issued with a write concern of "majority" and acknowledged prior to the start of the read operation.
      4.6,Query Selectors (https://docs.mongodb.com/manual/reference/operator/query/)
          4.6.1,Comparison
              $eq	            # =     { <field>: { $eq: <value> } } Matches values that are equal to a specified value.
              $gt	            # >     Matches values(array one element) that are greater than a specified value.
              $gte	        # >=    Matches values that are greater than or equal to a specified value.
              $lt	            # <     Matches values that are less than a specified value.
              $lte	        # <=    Matches values that are less than or equal to a specified value.
              $ne	            # !=    Matches all values that are not equal to a specified value.
              $in	            # in    Matches any of the values specified in an array.
              $nin	        # not in    Matches none of the values specified in an array.
          4.6.2,Logical
              $or	            # or    Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
              $and	        # and   Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
              $not	        # not   Inverts the effect of a query expression and returns documents that do not match the query expression.
              $nor	        # nor   Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
  		4.6.3,Element
  		    $exists	        # Matches documents that have the specified field.
              $type	        # Selects documents if a field is of the specified type.
          4.6.4,Evaluation
  			$mod	        # Performs a modulo operation on the value of a field and selects documents with a specified result.
              $regex	        # Selects documents where values match a specified regular expression.
              $text	        # Performs text search.
              $where	        # Matches documents that satisfy a JavaScript expression.
  		4.6.4,Geospatial
              $geoWithin	    # Selects geometries within a bounding GeoJSON geometry. The 2dsphere and 2d indexes support $geoWithin.
              $geoIntersects	# Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.
              $near	        # Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.
              $nearSphere	    # Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.
  		4.6.5,Array
  			$all	        # Matches arrays that contain all elements specified in the query.
              $elemMatch	    # Selects documents if element in the array field matches all the specified $elemMatch conditions.
              $size	        # Selects documents if the array field is a specified size.
  		4.6.6,Bitwise
  		    $bitsAllSet	    # Matches numeric or binary values in which a set of bit positions all have a value of 1.
              $bitsAnySet	    # Matches numeric or binary values in which any bit from a set of bit positions has a value of 1.
              $bitsAllClear	# Matches numeric or binary values in which a set of bit positions all have a value of 0.
              $bitsAnyClear	# Matches numeric or binary values in which any bit from a set of bit positions has a value of 0.
  		4.6.7,Projection Operators
  			$	            # Projects the first element in an array that matches the query condition.
              $elemMatch	    # Projects the first element in an array that matches the specified $elemMatch condition.
              $meta	        # Projects the document’s score assigned during $text operation.
              $slice	        # Limits the number of elements projected from an array. Supports skip and limit slices.
  	4.7,Update Operators
  	    4.7.1,Fields
  	        $inc	        # Increments the value of the field by the specified amount.
              $mul	        # Multiplies the value of the field by the specified amount.
              $rename	        # Renames a field.
              $setOnInsert	# Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.
              $set	        # Sets the value of a field in a document.
              $unset	        # Removes the specified field from a document.
              $min	        # Only updates the field if the specified value is less than the existing field value.
              $max	        # Only updates the field if the specified value is greater than the existing field value.
              $currentDate	# Sets the value of a field to current date, either as a Date or a Timestamp.
  		4.7.2,Array
  			$	            # Acts as a placeholder to update the first element that matches the query condition in an update.
              $addToSet	    # Adds elements to an array only if they do not already exist in the set.
              $pop	        # Removes the first or last item of an array.
              $pullAll	    # Removes all matching values from an array.
              $pull	        # Removes all array elements that match a specified query.
              $pushAll	    # Deprecated. Adds several items to an array.
              $push	        # Adds an item to an array.
  		4.7.3,Modifiers
  		    $each	        # Modifies the $push and $addToSet operators to append multiple items for array updates.
              $slice	        # Modifies the $push operator to limit the size of updated arrays.
              $sort	        # Modifies the $push operator to reorder documents stored in an array.
              $position	    # Modifies the $push operator to specify the position in the array to add elements.
          4.7.4,Bitwise
              $bit	        # Performs bitwise AND, OR, and XOR updates of integer values.
          4.7.5,Isolation
              $isolated	    # Modifies the behavior of a write operation to increase the isolation of the operation.
      4.8,Bulk  (https://docs.mongodb.com/manual/core/bulk-write-operations/)
          4.8.1,bulkWrite() Methods
              insertOne
              updateOne
              updateMany
              replaceOne
              deleteOne
              deleteMany
      4.9,Atomicity and Transactions
          4.9.1,In MongoDB, a write operation is atomic on the level of a single document.
          4.9.2,Using the $isolated operator, a write operation that affects multiple documents.
              #$isolated does not work with sharded clusters.



