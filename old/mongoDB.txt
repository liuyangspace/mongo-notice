mongoDB
home:https://docs.mongodb.com/manual/

1,install
	Ubuntu: sudo apt-get install mongodb 安装 MongoDB\
	CentOS: yum install -y mongodb-enterprise
	other: https://docs.mongodb.com/manual/installation/

4 CRUD
	4.1,Create
		db.collection.insert(<document or array of documents>,{writeConcern: <document>,ordered: <boolean>})
		db.collection.insertOne(<document>,{writeConcern: <document>}) 
		db.collection.insertMany([ <document 1> , <document 2>, ... ],{writeConcern: <document>,ordered: <boolean>})
	4.2,Retrieve
		db.collection.find([<query>][, <projection>])[.sort(<sort order>)][.limit( <n> )][.skip( <n> )][.pretty()][.explain()]
		    ArrayQuery(https://docs.mongodb.com/manual/tutorial/query-array-of-documents/):
		        <array>:[<value1>,<value1>]             #精确匹配，包括个数，及元素顺序
		        <array>:{$all:[<value1>,<value1>]}      #完全匹配，包含$all内的元素
		        "<field1>.[<number>.]<field2>"          #匹配数组field1内的[第number个元素]的field2
		        db.collection.find({<array>:<value>,<someOtherArray>:<value2>},{"<array>.$":1})
		            {"<array>.$":1} : returns only the first element in <array> for this condition
		        IterateCursor(https://docs.mongodb.com/manual/tutorial/iterate-a-cursor/):
		db.collection[.find([<query>][, <projection>])].count()
		db.collection.findOne([<query>])
		db.collection.distinct(field, query, options)
		#
		    $           :数组的元素
		    .           :在查询语句里表明嵌套结构，data: {"grades" : [ { grade: 80, mean: 75, std: 8 }]}, query:{"grades.mean": { $gt: 70 }}
		    _id         :ObjectId
		    $elemMatch  :in_array
	4.3,Update
	    db.collection.update(<query>, <update>, { upsert: <boolean>, multi: <boolean>, writeConcern: <document>, collation: <document> })
		db.collection.updateOne(<filter>, <update>, <options>)  # <update> -> 4.7,Update Operators
        db.collection.updateMany(<filter>, <update>, <options>)
        db.collection.replaceOne(<filter>, <replacement>, <options>)
	4.4,Delete
		db.collection.deleteMany({ <field1>: { <operator1>: <value1> }, ... })
        db.collection.deleteOne({ <field1>: { <operator1>: <value1> }, ... })
        db.collection.remove( <query>, { justOne: <boolean>, writeConcern: <document>, collation: <document> } )
	4.5,Concern
	    Write Concern:(https://docs.mongodb.com/manual/reference/write-concern/)
            w: 				# requests acknowledgement that the write operation has propagated to a specified number of mongod instances or to mongod instances with specified tags.
                1			# Requests acknowledgement that the write operation has propagated to the standalone mongod or the primary in a replica set. w: 1 is the default write concern for MongoDB.
                0			# Requests no acknowledgement of the write operation. However, w: 0 may return information about socket exceptions and networking errors to the application.
                majority	# Requests acknowledgement that write operations have propagated to the majority of voting nodes , including the primary.
                <tag set>	# Requests acknowledgement that the write operations have propagated to a replica set member with the specified tag.
            j:				# requests acknowledgement from MongoDB that the write operation has been written to the journal.
                true		# requests acknowledgement that the mongod instances have written to the on-disk journal.
            wtimeout:		# This option specifies a time limit, in milliseconds, for the write concern.
		Read Concern:(https://docs.mongodb.com/manual/reference/read-concern/)
		    local           # Default. The query returns the instance’s most recent data. Provides no guarantee that the data has been written to a majority of the replica set members (i.e. may be rolled back).
		    majority        # The query returns the instance’s most recent data acknowledged as having been written to a majority of members in the replica set.
		    linearizable    # The query returns data that reflects all successful writes issued with a write concern of "majority" and acknowledged prior to the start of the read operation.
    4.6,Query Selectors (https://docs.mongodb.com/manual/reference/operator/query/)
        4.6.1,Comparison
            $eq	            # =     { <field>: { $eq: <value> } } Matches values that are equal to a specified value.
            $gt	            # >     Matches values(array one element) that are greater than a specified value.
            $gte	        # >=    Matches values that are greater than or equal to a specified value.
            $lt	            # <     Matches values that are less than a specified value.
            $lte	        # <=    Matches values that are less than or equal to a specified value.
            $ne	            # !=    Matches all values that are not equal to a specified value.
            $in	            # in    Matches any of the values specified in an array.
            $nin	        # not in    Matches none of the values specified in an array.
        4.6.2,Logical
            $or	            # or    Joins query clauses with a logical OR returns all documents that match the conditions of either clause.
            $and	        # and   Joins query clauses with a logical AND returns all documents that match the conditions of both clauses.
            $not	        # not   Inverts the effect of a query expression and returns documents that do not match the query expression.
            $nor	        # nor   Joins query clauses with a logical NOR returns all documents that fail to match both clauses.
		4.6.3,Element
		    $exists	        # Matches documents that have the specified field.
            $type	        # Selects documents if a field is of the specified type.
        4.6.4,Evaluation
			$mod	        # Performs a modulo operation on the value of a field and selects documents with a specified result.
            $regex	        # Selects documents where values match a specified regular expression.
            $text	        # Performs text search.
            $where	        # Matches documents that satisfy a JavaScript expression.
		4.6.4,Geospatial
            $geoWithin	    # Selects geometries within a bounding GeoJSON geometry. The 2dsphere and 2d indexes support $geoWithin.
            $geoIntersects	# Selects geometries that intersect with a GeoJSON geometry. The 2dsphere index supports $geoIntersects.
            $near	        # Returns geospatial objects in proximity to a point. Requires a geospatial index. The 2dsphere and 2d indexes support $near.
            $nearSphere	    # Returns geospatial objects in proximity to a point on a sphere. Requires a geospatial index. The 2dsphere and 2d indexes support $nearSphere.
		4.6.5,Array
			$all	        # Matches arrays that contain all elements specified in the query.
            $elemMatch	    # Selects documents if element in the array field matches all the specified $elemMatch conditions.
            $size	        # Selects documents if the array field is a specified size.
		4.6.6,Bitwise
		    $bitsAllSet	    # Matches numeric or binary values in which a set of bit positions all have a value of 1.
            $bitsAnySet	    # Matches numeric or binary values in which any bit from a set of bit positions has a value of 1.
            $bitsAllClear	# Matches numeric or binary values in which a set of bit positions all have a value of 0.
            $bitsAnyClear	# Matches numeric or binary values in which any bit from a set of bit positions has a value of 0.
		4.6.7,Projection Operators
			$	            # Projects the first element in an array that matches the query condition.
            $elemMatch	    # Projects the first element in an array that matches the specified $elemMatch condition.
            $meta	        # Projects the document’s score assigned during $text operation.
            $slice	        # Limits the number of elements projected from an array. Supports skip and limit slices.
	4.7,Update Operators
	    4.7.1,Fields
	        $inc	        # Increments the value of the field by the specified amount.
            $mul	        # Multiplies the value of the field by the specified amount.
            $rename	        # Renames a field.
            $setOnInsert	# Sets the value of a field if an update results in an insert of a document. Has no effect on update operations that modify existing documents.
            $set	        # Sets the value of a field in a document.
            $unset	        # Removes the specified field from a document.
            $min	        # Only updates the field if the specified value is less than the existing field value.
            $max	        # Only updates the field if the specified value is greater than the existing field value.
            $currentDate	# Sets the value of a field to current date, either as a Date or a Timestamp.
		4.7.2,Array
			$	            # Acts as a placeholder to update the first element that matches the query condition in an update.
            $addToSet	    # Adds elements to an array only if they do not already exist in the set.
            $pop	        # Removes the first or last item of an array.
            $pullAll	    # Removes all matching values from an array.
            $pull	        # Removes all array elements that match a specified query.
            $pushAll	    # Deprecated. Adds several items to an array.
            $push	        # Adds an item to an array.
		4.7.3,Modifiers
		    $each	        # Modifies the $push and $addToSet operators to append multiple items for array updates.
            $slice	        # Modifies the $push operator to limit the size of updated arrays.
            $sort	        # Modifies the $push operator to reorder documents stored in an array.
            $position	    # Modifies the $push operator to specify the position in the array to add elements.
        4.7.4,Bitwise
            $bit	        # Performs bitwise AND, OR, and XOR updates of integer values.
        4.7.5,Isolation
            $isolated	    # Modifies the behavior of a write operation to increase the isolation of the operation.
    4.8,Bulk  (https://docs.mongodb.com/manual/core/bulk-write-operations/)
        4.8.1,bulkWrite() Methods
            insertOne
            updateOne
            updateMany
            replaceOne
            deleteOne
            deleteMany
    4.9,Atomicity and Transactions
        4.9.1,In MongoDB, a write operation is atomic on the level of a single document.
        4.9.2,Using the $isolated operator, a write operation that affects multiple documents.
            #$isolated does not work with sharded clusters.




			
sudo service mongodb stop 
sudo service mongodb start
data/db 在跟目录创建文件夹
$ mongod –auth 重新启动服务
$ mongo 创建连接
> use admin
switched to db admin
> db.addUser("root","1983") 创建连接用户
> db.auth("root","1983") 进行用户验证
默认安装的话只允许 127.0.0.1 的IP 连接.
　　需要修改/etc/mongodb.conf 注释下列记录：
　　打开文件：
　　　　$ sudo gedit /etc/mongodb.conf
　　注释记录：
　　　　#bind_ip = 0.0.0.0 

> use mydb  创建一个数据库名称为<mydb>  use DATABASE_NAME
switched to db mydb
> db 检查当前选择的数据库
mydb
> show dbs 查询数据库列表
> db.movie.insert({"name":"yiibai tutorials"}) 插入一个文档
> db.dropDatabase() 删除选定的数据库
> db.createCollection("mycollection") 创建集合  db.createCollection(name, options)
	options:
	capped	Boolean	（可选）如果为true，它启用上限集合。上限集合是一个固定大小的集合，当它达到其最大尺寸会自动覆盖最老的条目。 如果指定true，则还需要指定参数的大小。
	autoIndexID	Boolean	（可选）如果为true，自动创建索引_id字段。默认的值是 false.
	size	number	（可选）指定的上限集合字节的最大尺寸。如果capped 是true，那么还需要指定这个字段。
	max	number	（可选）指定上限集合允许的最大文件数。
> db.mycollection.drop() 将删除给定名称的集合：mycollection  db.COLLECTION_NAME.drop()
> db.createCollection("mycol")
> db.mycol.insert({
   _id: ObjectId(7df78ad8902c),
   title: 'MongoDB Overview', 
   tags: ['mongodb', 'database', 'NoSQL'],
   likes: 100
})  插入文档 db.COLLECTION_NAME.insert(document)
> db.mycol.find().pretty() 查询文档 db.COLLECTION_NAME.find() find() 方法将在非结构化的方式显示所有的文件。 如果显示结果是格式化的，那么可以用pretty() 方法。
	除了find()方法还有findOne()方法，仅返回一个文档。
	RDBMS Where子句等效于MongoDB
	查询文档在一些条件的基础上，可以使用下面的操作
	操作			语法			示例							RDBMS等效语句
	Equality		{<key>:<value>}		db.mycol.find({"by":"yiibai tutorials"}).pretty()	where by = 'yiibai tutorials'
	Less Than		{<key>:{$lt:<value>}}	db.mycol.find({"likes":{$lt:50}}).pretty()		where likes < 50
	Less Than Equals	{<key>:{$lte:<value>}}	db.mycol.find({"likes":{$lte:50}}).pretty()		where likes <= 50
	Greater Than		{<key>:{$gt:<value>}}	db.mycol.find({"likes":{$gt:50}}).pretty()		where likes > 50
	Greater Than Equals	{<key>:{$gte:<value>}}	db.mycol.find({"likes":{$gte:50}}).pretty()		where likes >= 50
	Not Equals		{<key>:{$ne:<value>}}	db.mycol.find({"likes":{$ne:50}}).pretty()		where likes != 50
> db.mycol.find({"by":"yiibai tutorials","title": "MongoDB Overview"}).pretty()  AND 在 MongoDB >db.mycol.find({key1:value1, key2:value2}).pretty()
> db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty() OR 在 MongoDB  >db.mycol.find({$or: [{key1: value1}, {key2:value2}]}).pretty()
> db.mycol.find("likes": {$gt:10}, $or: [{"by": "yiibai tutorials"}, {"title": "MongoDB Overview"}] }).pretty()  使用 AND 和 OR 在一起  等效于SQL的where子句：'where likes>10 AND (by = 'yiibai tutorials' OR title = 'MongoDB Overview')'
>db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})  更新文档  db.COLLECTION_NAME.update(SELECTIOIN_CRITERIA, UPDATED_DATA)
>db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}},{multi:true}) 默认情况下，MongoDB将只更新单一文件，更新多，需要一个参数 'multi' 设置为 true。
   方法取代，通过新文档到 save()方法 >db.COLLECTION_NAME.save({_id:ObjectId(),NEW_DATA})
>db.mycol.remove({'title':'MongoDB Overview'})  删除文档   >db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)  
	remove()方法接受两个参数。一个是标准缺失，第二是justOne标志
	deletion criteria : 根据文件（可选）删除条件将被删除。
	justOne : （可选）如果设置为true或1，然后取出只有一个文档。
	如果有多个记录，并要删除仅第一条记录，然后在 remove()方法设置参数 justOne 。
	>db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)
	如果没有指定删除条件，则MongoDB将从集合中删除整个文件。这相当于SQL的 truncate 命令。
	>db.mycol.remove()
>db.mycol.find({},{"title":1,_id:0})  MongoDB投影  >db.COLLECTION_NAME.find({},{KEY:1}) 
	MongoDB的find()方法，解释了MongoDB中查询文档接收的第二个可选的参数是要检索的字段列表。在MongoDB中，当执行find()方法，那么它会显示一个文档的所有字段。
	要限制这一点，需要设置字段列表值为1或0。1是用来显示字段，而0被用来隐藏字段。

>db.mycol.find({},{"title":1,_id:0}).limit(2)  限制文档  >db.COLLECTION_NAME.find().limit(NUMBER)
>db.mycol.find({},{"title":1,_id:0}).limit(1).skip(1)  Skip() 方法  >db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)  除了 limit()方法还有一个方法 skip()也接受数字类型参数并用于跳过文件数。
>db.mycol.find({},{"title":1,_id:0}).sort({"title":-1})  文档排序  >db.COLLECTION_NAME.find().sort({KEY:1})  
	要排序MongoDB中的文档，需要使用 sort()方法。 sort() 方法接受一个包含字段列表以及排序顺序的文档。 要使用1和-1指定排序顺序。1用于升序，而-1是用于降序。
>db.mycol.ensureIndex({"title":1,"description":-1})  MongoDB索引    >db.COLLECTION_NAME.ensureIndex({KEY:1})   这里键是要创建索引字段，1是按名称升序排序。若以按降序创建索引，需要使用 -1.
   	MongoDB 聚合  >db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION) 




1.查看数据库表基本信息。
select * from information_schema.TABLES where information_schema.TABLES.TABLE_SCHEMA = '数据库名' and information_schema.TABLES.TABLE_NAME = '表名';

2.查看mysql数据库大小
SELECT sum(DATA_LENGTH)+sum(INDEX_LENGTH) FROM information_schema.TABLES where TABLE_SCHEMA='数据库名';
得到的结果是以字节为单位，除1024为K，除1048576(=1024*1024)为M。

3.查看表的最后mysql修改时间
select TABLE_NAME,UPDATE_TIME from information_schema.TABLES where TABLE_SCHEMA='数据库名' order by UPDATE_TIME desc limit 1; 
select TABLE_NAME,UPDATE_TIME from information_schema.TABLES where TABLE_SCHEMA='数据库名' and information_schema.TABLES.TABLE_NAME = '表名'; 

Stream 函数

bundle exec cap staging deploy


db.Place.update({'title':'上海南'}，{$set:{'coordinate' : [ {'longitude' : 31.2471050000}, {'latitude' : 121.4950490000} ]}})
db.Coordinate.update({""})








